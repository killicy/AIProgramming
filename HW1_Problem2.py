# -*- coding: utf-8 -*-
"""HW1_Problem2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kgx_4KaCjMNxbTEI9r4MyLdW1J5fS2bx
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.rc('axes', labelsize=14)
mpl.rc('xtick', labelsize=12)
mpl.rc('ytick', labelsize=12)
from mpl_toolkits import mplot3d
plt.style.use('seaborn-white')
import numpy as np
from numpy import ma

import numpy as np
np.random.seed(42)

xs = 2 * np.random.rand(100, 1)
ys = 4 + 3 * xs + np.random.rand(100, 1)
zs = 5 + ys + np.random.rand(100, 1)

fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter(xs, ys, zs, "b.", marker='o')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z');

# split the data into training and test sets
# train set
train_xs = xs[:80]
train_ys = ys[:80]
train_zs = zs[:80]
# test set
test_xs = xs[80:]
test_ys = ys[80:]
test_zs = zs[80:]

"""##Linear Regression"""

# number of epochs
epochs = 10
# learning rate
lr = 0.01

# initial value for weight w and bias b
w1 = np.random.randn(1)
w2 = np.random.randn(1)
b = np.zeros(1)

for epoch in np.arange(epochs):
  for i in np.arange(80):
    y_pred = w1 * train_xs[i] + b
    z_pred = w2 * train_ys[i] + b
    grad_w1 = (y_pred - train_ys[i]) * train_xs[i]
    grad_w2 = (z_pred - train_zs[i]) * train_ys[i]
    grad_b = (y_pred - train_ys[i])
    
    w1 -= lr * grad_w1
    w2 -= lr * grad_w2
    b -= lr * grad_b

test_loss = 0
for i in np.arange(20):
  test_loss += 0.5 * (w1 * test_xs[i] + w2 * test_zs[i] + b - test_ys[i]) ** 2
test_loss /= 20

test_loss

pred_ys = w * test_xs + b

fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter(test_xs, test_ys, test_zs, "b.", marker='o')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z');
plt.show()

b

w1

w2
