# -*- coding: utf-8 -*-
"""HW2Problem1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r6LtdC7wWM2dknmjmkQA4dtLsc051OvR
"""

import tensorflow as tf
from tensorflow import keras
from keras.datasets import mnist
from keras.layers import Dense, Activation, Flatten, Conv2D, MaxPooling2D
from keras.models import Sequential
from keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

def softmax(X):
    expo = np.exp(X)
    expo_sum = np.sum(np.exp(X))
    return expo/expo_sum

# Boolean all images
import matplotlib.pyplot as plt

feature_images = []
for image in train_images:
  digit_flat = image.flatten()
  digit_feature_flat = []

  for pixel in digit_flat:
    digit_feature_flat.append(pixel > 1)
  digit_feature = np.array(digit_feature_flat).reshape(28,28)

  feature_images.append(digit_feature);

import matplotlib.pyplot as plt

feature_test_images = []
for image in test_images:
  digit_flat = image.flatten()
  digit_feature_flat = []

  for pixel in digit_flat:
    digit_feature_flat.append(pixel > 1)
  digit_feature = np.array(digit_feature_flat).reshape(28,28)

  feature_test_images.append(digit_feature);

# Get numer of whitespace regions per image
from scipy import ndimage
feature_ws = []
for image in feature_images:
  [L, n] = ndimage.label(image)
  feature_ws.append(n);

from scipy import ndimage
feature_test_ws = []
for image in feature_test_images:
  [L, n] = ndimage.label(image)
  feature_test_ws.append(n);

# Network, multiple input values
def network():

  inputImage = keras.layers.Input(shape=(28,28))
  inputImage2 = keras.layers.Input(shape=(28,28))
  input3 = keras.layers.Input(shape=(1))
  
  outputFlat = keras.layers.Flatten(input_shape=(28,28))(inputImage)
  outputFlat2 = keras.layers.Flatten(input_shape=(28,28))(inputImage2)

  merge = keras.layers.Concatenate()([outputFlat, outputFlat2, input3])
  # 10 possible outcomes, 10 labels
  predictions = keras.layers.Dense(10, activation=tf.nn.softmax)(merge)

  model = keras.Model(inputs=[inputImage, inputImage2, input3], outputs=predictions)

  # model = keras.Sequential([
  #     keras.layers.Flatten(input_shape=(28,28)),
  #     keras.layers.Dense(14, activation=tf.nn.softmax)
  # ])
  # compile the model
  
  model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
  
  return model

model = network();

# train the model
epochs = 20

# https://stackoverflow.com/questions/42596057/keras-error-expected-to-see-1-array
# Must use list of numpy arrays for model.fit function with multiple unputs
history = model.fit([np.array(train_images), np.array(feature_images), np.array(feature_ws)], # x, input data aka feature
                      train_labels, # y, target data aka label
                      epochs=epochs, # number of epochs (iterations over entire data x,y)
                      validation_data=([np.array(test_images), np.array(feature_test_images), np.array(feature_test_ws)], test_labels)) # tuple, evaluate loss

plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['training', 'validation'], loc='best')
plt.show()

from tensorflow.keras.utils import plot_model
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

